/* generated by gensort */
package main

import (
	"math/rand"
	"sync"
)

func quickSort(_xs []int) {
	_partition := func(_xs []int) (low, high []int) {
		var (
			_chosen = rand.Intn(len(_xs))
			y       = _xs[_chosen]
		)

		_i, _j := 0, 0
		for _k, x := range _xs {
			if x < y {
				_xs[_k] = _xs[_j]
				_xs[_j] = _xs[_i]
				_xs[_i] = x
				_i++
				_j++
			} else if x == y {
				_xs[_k] = _xs[_j]
				_xs[_j] = x
				_j++
			}
		}

		return _xs[:_i], _xs[_j:]
	}

	const threshold = 1000
	var wg sync.WaitGroup
	var quickSort func([]int)
	quickSort = func(xs []int) {
	init:
		if len(xs) <= 1 {
			return
		}

		low, high := _partition(xs)

		var short, long []int
		if len(low) < len(high) {
			short, long = low, high
		} else {
			short, long = high, low
		}

		if len(short) > threshold {
			wg.Add(1)
			go func() {
				quickSort(short)
				wg.Done()
			}()
		} else {
			quickSort(short)
		}
		xs = long
		goto init
	}

	quickSort(_xs)
	wg.Wait()
}
