/* generated by gensort */
package main

import (
	"math/rand"
	"sync"
)

func sortInt64(xs []int64) {
	const threshold = 1000

	partition := func(xs []int64) (low, high []int64) {
		var (
			chosen = rand.Intn(len(xs))
			y  = xs[chosen]
		)

		i, j := 0, 0
		for k, x := range xs {
			if x > y {
				xs[k] = xs[j]
				xs[j] = xs[i]
				xs[i] = x
				i++
				j++
			} else if x == y {
				xs[k] = xs[j]
				xs[j] = x
				j++
			}
		}

		return xs[:i], xs[j:]
	}

	var wg sync.WaitGroup
	var sortInt64 func([]int64)
	sortInt64 = func(xs []int64) {
	init:
		if len(xs) <= 1 {
			return
		}

		low, high := partition(xs)

		var short, long []int64
		if len(low) < len(high) {
			short, long = low, high
		} else {
			short, long = high, low
		}

		if len(short) > threshold {
			wg.Add(1)
			go func() {
				sortInt64(short)
				wg.Done()
			}()
		} else {
			sortInt64(short)
		}
		xs = long
		goto init
	}

	sortInt64(xs)
	wg.Wait()
}
